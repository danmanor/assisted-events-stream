// Code generated by MockGen. DO NOT EDIT.
// Source: snapshot_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/openshift-assisted/assisted-events-streams/internal/types"
)

// MockSnapshotRepositoryInterface is a mock of SnapshotRepositoryInterface interface.
type MockSnapshotRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotRepositoryInterfaceMockRecorder
}

// MockSnapshotRepositoryInterfaceMockRecorder is the mock recorder for MockSnapshotRepositoryInterface.
type MockSnapshotRepositoryInterfaceMockRecorder struct {
	mock *MockSnapshotRepositoryInterface
}

// NewMockSnapshotRepositoryInterface creates a new mock instance.
func NewMockSnapshotRepositoryInterface(ctrl *gomock.Controller) *MockSnapshotRepositoryInterface {
	mock := &MockSnapshotRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSnapshotRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotRepositoryInterface) EXPECT() *MockSnapshotRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetCluster mocks base method.
func (m *MockSnapshotRepositoryInterface) GetCluster(ctx context.Context, clusterID string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, clusterID)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockSnapshotRepositoryInterfaceMockRecorder) GetCluster(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockSnapshotRepositoryInterface)(nil).GetCluster), ctx, clusterID)
}

// GetHosts mocks base method.
func (m *MockSnapshotRepositoryInterface) GetHosts(ctx context.Context, clusterID string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", ctx, clusterID)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts.
func (mr *MockSnapshotRepositoryInterfaceMockRecorder) GetHosts(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockSnapshotRepositoryInterface)(nil).GetHosts), ctx, clusterID)
}

// GetInfraEnvs mocks base method.
func (m *MockSnapshotRepositoryInterface) GetInfraEnvs(ctx context.Context, clusterID string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfraEnvs", ctx, clusterID)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfraEnvs indicates an expected call of GetInfraEnvs.
func (mr *MockSnapshotRepositoryInterfaceMockRecorder) GetInfraEnvs(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfraEnvs", reflect.TypeOf((*MockSnapshotRepositoryInterface)(nil).GetInfraEnvs), ctx, clusterID)
}

// SetCluster mocks base method.
func (m *MockSnapshotRepositoryInterface) SetCluster(ctx context.Context, clusterID string, event *types.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCluster", ctx, clusterID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCluster indicates an expected call of SetCluster.
func (mr *MockSnapshotRepositoryInterfaceMockRecorder) SetCluster(ctx, clusterID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCluster", reflect.TypeOf((*MockSnapshotRepositoryInterface)(nil).SetCluster), ctx, clusterID, event)
}

// SetHost mocks base method.
func (m *MockSnapshotRepositoryInterface) SetHost(ctx context.Context, clusterID, hostID string, event *types.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHost", ctx, clusterID, hostID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHost indicates an expected call of SetHost.
func (mr *MockSnapshotRepositoryInterfaceMockRecorder) SetHost(ctx, clusterID, hostID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHost", reflect.TypeOf((*MockSnapshotRepositoryInterface)(nil).SetHost), ctx, clusterID, hostID, event)
}

// SetInfraEnv mocks base method.
func (m *MockSnapshotRepositoryInterface) SetInfraEnv(ctx context.Context, clusterID, infraEnvID string, event *types.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfraEnv", ctx, clusterID, infraEnvID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInfraEnv indicates an expected call of SetInfraEnv.
func (mr *MockSnapshotRepositoryInterfaceMockRecorder) SetInfraEnv(ctx, clusterID, infraEnvID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfraEnv", reflect.TypeOf((*MockSnapshotRepositoryInterface)(nil).SetInfraEnv), ctx, clusterID, infraEnvID, event)
}
